// First example model: counting
// Adapted from the ACT-R tutorial by Niels Taatgen
// This is an example of an experiment feature in PRIMs: declarative buffer stuffing
// Whenever the retrieval buffer is empty, it will be stuffed with the most active fact in memory


define task count {
  initial-goals: (count) // In this example the task and the goal are the same
  start-screen: start
  imaginal-autoclear: nil 
  default-activation: 1.0 // All chunks defined in this model receive a fixed baselevel activation of 1.0
  ol: t
  rt: -2.0
  lf: 0.2
  default-operator-self-assoc: 0.0
  declarative-buffer-stuffing: t
  egs: 0.05
}

define goal count {
  operator start-count {
  "Start counting"
   V1 <> nil  // There has to be a visual input with the starting number
   WM1 = nil  // Imaginal should be empty
  ==>
   V1 -> WM1 // Copy the start number to working memory
   say -> AC1 // Say the current number
   V1 -> AC2
   }

  operator iterate {
    "Iterate as long as count isn't done"
    RT1 = count-fact
    RT2 = WM1
    V2 <> WM1
   ==>
    RT3 -> WM1
    say -> AC1
    RT3 ->AC2
  }

operator retrieve-when-necessary {
   RT2 <> WM1
   V2 <> WM1
 ==>
   count-fact -> RT1
   WM1 -> RT2
}

  operator final {
    "Stop when reaching final number"
    V2 = WM1
   ==>
    say -> AC1
    stop -> AC2
    stop -> G1
  }
}

define facts {
    (cf1 count-fact  one  two)
    (cf2 count-fact  two  three)
    (cf3  count-fact  three  four)
    (cf4  count-fact  four  five)
    (cf5  count-fact  five  six)
}

define action say {
  latency: 0.3
  noise: 0.1
  distribution: uniform
  output: Saying
}

define screen start {
(?0 ?1)
}

define goal-action {
(say stop)
}

define inputs {
(two four)
(one three)
(three five)
}

