define task test {
initial-goals: (test)
rt: -2.0
lf: 0.3
ans: 0.1
default-activation: 1.0
references: (fact-type)
}

define facts {
    (one number 1)
    (two number 2)
    (fact1+1 addition-fact one one two)
}


define goal test {

operator first-step {
    WM1 = nil
==>
    fact-type -> WM1
    >>WM2
    one -> WM1
}

operator second-step {
    WM1 = one
==>
    WM<<
    two -> WM3
}

operator test-retrieve {
    WM3 = two
    RT1 = nil
==>
    fact-type -> RT1
    one -> RT2
}

operator dig-in-retrieve-that-fails {
    WM3 = two
    RT1 = fact-type
    >>RT2
    RT1 = ghost
    RT<<
    ==>
    nil -> G1
    say -> AC1
    RT4 -> AC2
}


operator dig-in-retrieve {
    WM3 = two
    RT1 = fact-type
    >>RT2
    RT1 = number
    RT<<
==>
    say -> AC1
    RT4 -> AC2
    >>RT4
    RT1 -> WM3
}

operator visual-one {
    WM3 = number
    V1 = screen
==>
    >>V3
    >>V3
    say -> AC1
    V4 -> AC2
}

operator back-up {
    V1 = item
    V<<
==>
    say -> AC1
    V1 -> AC2
    V1 -> WM3
}

operator all-done {
    WM3 = placemat
==>
    done -> AC1
}
}

define facts {
    (item7 item nil nil fork)
    (item6 item item7 nil spoon)
    (item5 item item6 nil knife)
    (item4 item item5 nil spoon)
    (placemat2 placemat nil item4)
    (item3 item nil nil spoon)
    (item2 item item3 nil knife)
    (item1 item item2 nil fork)
    (placemat1 placemat placemat2 item1)
    (screen1 screen nil placemat1)
}




define script {
    set-goal("test", ["fact-type", "addition-fact"])
    screen("screen1")
    run-until-action("done")
    issue-reward()
    trial-end()
}
